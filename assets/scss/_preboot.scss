// Vars
// --------------------------------------

// Descriptive Colors
$success: 		#7CC576;
$error: 		#F26C4F;

// Extends
// --------------------------------------------------
%break {
	word-break: break-word;
	word-wrap: break-word;
}
%box-size {
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	   		box-sizing: border-box;
}
%block {
	display: block;
}

// // Mixins
// --------------------------------------------------
@mixin no-select {
	-webkit-user-select: none;
	   -moz-user-select: none;
	   	-ms-user-select: none;
	   		user-select: none;
}

@mixin border-radius($radius: 2px) {
	-webkit-border-radius: $radius;
		 -moz-border-radius: $radius;
			  border-radius: $radius;
}

$baseline-px: 16px;

@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem; }
	@else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
		// Return the property and its list of converted values
		#{$property}: $rem-values; } }
